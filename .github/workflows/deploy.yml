name: Deploy to Server
on:
  push:
    branches:
      - master
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 89.110.83.57 >> ~/.ssh/known_hosts

      - name: Clear old files on server
        run: ssh root@89.110.83.57 "rm -rf /var/www/myapp/*"

      - name: Copy files to server
        run: |
          rsync -av --exclude=".git" --exclude=".github" --exclude="node_modules" --delete ./ root@89.110.83.57:/var/www/myapp/

      - name: Deploy to server
        run: |
          ssh root@89.110.83.57 << 'EOF'
            cd /var/www/myapp
            
            # Проверка наличия .env
            if [ ! -f /var/www/myapp/.env ]; then
              touch /var/www/myapp/.env
            fi

            # Остановить и удалить старый контейнер если есть
            docker stop telegram-bot || true
            docker rm telegram-bot || true
            
            # Удалить старые образы перед созданием нового
            docker rmi telegram-bot || true

            # Собрать новый образ
            docker build -t telegram-bot .
            
            # Запустить новый контейнер
            docker run -d \
              --name telegram-bot \
              --restart unless-stopped \
              -v /var/www/myapp/.env:/root/.env \
              telegram-bot
            
            # Очистка неиспользуемых образов
            docker system prune -f
          EOF
