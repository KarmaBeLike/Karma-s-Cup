name: Deploy to Server
on:
  push:
    branches:
      - master
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 89.110.83.57 >> ~/.ssh/known_hosts

      - name: Copy files to server
        run: |
          scp -r ./* root@89.110.83.57:/var/www/myapp/

      - name: Restore .env
        run: |
          ssh root@89.110.83.57 "echo '${{ secrets.ENV_FILE }}' > /var/www/myapp/.env"

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no root@89.110.83.57 << 'EOF'
            cd /var/www/myapp
            
            # Остановить и удалить старый контейнер, если он есть
            docker stop telegram-bot || true
            docker rm telegram-bot || true
            
            # Собрать новый Docker-образ
            docker build -t telegram-bot .
            
            # Запустить новый контейнер
            docker run -d \
              --name telegram-bot \
              --restart unless-stopped \
              -v /var/www/myapp/.env:/root/.env \
              telegram-bot
            
            # Очистка неиспользуемых образов
            docker system prune -f
          EOF
